/**************************************************//**
@file fc/fc0recv.ic
Flash Cache for InnoDB

Created	24/10/2013 Thomas Wen (wenzhenghu.zju@gmail.com)
*******************************************************/

#ifndef fc0recv_ic
#define fc0recv_ic
#include "page0zip.h"

/******************************************************************//**
Check if the page size is zip_size,   
@return: TRUE if the pge size is zip_size*/
UNIV_INLINE
ulint
fc_page_calc_size(
/*==================*/
	byte *read_buf, /*<! in: data buffer read from ssd, contain data page */
	ulint zip_size) /*<! in: the page size we guess */
{
	ulint		checksum_field1;
	ulint		checksum_field2;
	ibool		crc32_inited = FALSE;
	ib_uint32_t	crc32 = ULINT32_UNDEFINED;

	if (UNIV_LIKELY(!zip_size)
	    && memcmp(read_buf + FIL_PAGE_LSN + 4, (read_buf + UNIV_PAGE_SIZE
		      - FIL_PAGE_END_LSN_OLD_CHKSUM + 4), 4)) {
		/* Stored log sequence numbers at the start and the end
		 * of page do not match */
		return(TRUE);
	}

	/* Check whether the checksum fields have correct values */

	if (srv_checksum_algorithm == SRV_CHECKSUM_ALGORITHM_NONE) {
		return(FALSE);
	}

	if (zip_size) {
		return(!page_zip_verify_checksum(read_buf, zip_size));
	}

	checksum_field1 = mach_read_from_4(
		read_buf + FIL_PAGE_SPACE_OR_CHKSUM);

	checksum_field2 = mach_read_from_4(
		read_buf + UNIV_PAGE_SIZE - FIL_PAGE_END_LSN_OLD_CHKSUM);

	/* declare empty pages non-corrupted */
	if (checksum_field1 == 0 && checksum_field2 == 0
	    && mach_read_from_4(read_buf + FIL_PAGE_LSN) == 0) {
		/* make sure that the page is really empty */
		for (ulint i = 0; i < UNIV_PAGE_SIZE; i++) {
			if (read_buf[i] != 0) {
				return(TRUE);
			}
		}

		return(FALSE);
	}

	switch ((srv_checksum_algorithm_t) srv_checksum_algorithm) {
	case SRV_CHECKSUM_ALGORITHM_STRICT_CRC32:

		crc32 = buf_calc_page_crc32(read_buf);

		return(checksum_field1 != crc32 || checksum_field2 != crc32);

	case SRV_CHECKSUM_ALGORITHM_STRICT_INNODB:

		return(checksum_field1
		       != buf_calc_page_new_checksum(read_buf)
		       || checksum_field2
		       != buf_calc_page_old_checksum(read_buf));

	case SRV_CHECKSUM_ALGORITHM_STRICT_NONE:

		return(checksum_field1 != BUF_NO_CHECKSUM_MAGIC
		       || checksum_field2 != BUF_NO_CHECKSUM_MAGIC);

	case SRV_CHECKSUM_ALGORITHM_CRC32:
	case SRV_CHECKSUM_ALGORITHM_INNODB:
		/* There are 3 valid formulas for
		checksum_field2 (old checksum field):

		1. Very old versions of InnoDB only stored 8 byte lsn to the
		start and the end of the page.

		2. InnoDB versions before MySQL 5.6.3 store the old formula
		checksum (buf_calc_page_old_checksum()).

		3. InnoDB versions 5.6.3 and newer with
		innodb_checksum_algorithm=strict_crc32|crc32 store CRC32. */

		/* since innodb_checksum_algorithm is not strict_* allow
		any of the algos to match for the old field */

		if (checksum_field2
		    != mach_read_from_4(read_buf + FIL_PAGE_LSN)
		    && checksum_field2 != BUF_NO_CHECKSUM_MAGIC) {

			/* The checksum does not match any of the
			fast to check. First check the selected algorithm
			for writing checksums because we assume that the
			chance of it matching is higher. */

			if (srv_checksum_algorithm
			    == SRV_CHECKSUM_ALGORITHM_CRC32) {

				crc32 = buf_calc_page_crc32(read_buf);
				crc32_inited = TRUE;

				if (checksum_field2 != crc32
				    && checksum_field2
				    != buf_calc_page_old_checksum(read_buf)) {

					return(TRUE);
				}
			} else {
				ut_ad(srv_checksum_algorithm
				     == SRV_CHECKSUM_ALGORITHM_INNODB);

				if (checksum_field2
				    != buf_calc_page_old_checksum(read_buf)) {

					crc32 = buf_calc_page_crc32(read_buf);
					crc32_inited = TRUE;

					if (checksum_field2 != crc32) {
						return(TRUE);
					}
				}
			}
		}

		/* old field is fine, check the new field */

		/* InnoDB versions < 4.0.14 and < 4.1.1 stored the space id
		(always equal to 0), to FIL_PAGE_SPACE_OR_CHKSUM */

		if (checksum_field1 != 0
		    && checksum_field1 != BUF_NO_CHECKSUM_MAGIC) {

			/* The checksum does not match any of the
			fast to check. First check the selected algorithm
			for writing checksums because we assume that the
			chance of it matching is higher. */

			if (srv_checksum_algorithm
			    == SRV_CHECKSUM_ALGORITHM_CRC32) {

				if (!crc32_inited) {
					crc32 = buf_calc_page_crc32(read_buf);
					crc32_inited = TRUE;
				}

				if (checksum_field1 != crc32
				    && checksum_field1
				    != buf_calc_page_new_checksum(read_buf)) {

					return(TRUE);
				}
			} else {
				ut_ad(srv_checksum_algorithm
				     == SRV_CHECKSUM_ALGORITHM_INNODB);

				if (checksum_field1
				    != buf_calc_page_new_checksum(read_buf)) {

					if (!crc32_inited) {
						crc32 = buf_calc_page_crc32(
							read_buf);
						crc32_inited = TRUE;
					}

					if (checksum_field1 != crc32) {
						return(TRUE);
					}
				}
			}
		}

		/* If CRC32 is stored in at least one of the fields, then the
		other field must also be CRC32 */
		if (crc32_inited
		    && ((checksum_field1 == crc32
			 && checksum_field2 != crc32)
			|| (checksum_field1 != crc32
			    && checksum_field2 == crc32))) {

			return(TRUE);
		}

		break;
	case SRV_CHECKSUM_ALGORITHM_NONE:
		/* should have returned FALSE earlier */
		ut_error;
	/* no default so the compiler will emit a warning if new enum
	is added and not handled here */
	}

	DBUG_EXECUTE_IF("buf_page_is_corrupt_failure", return(TRUE); );

	return(FALSE);
}

/******************************************************************//**
Exchange the page size from ,   
@return: the size of page, with number of L2 Cache base blocks */
UNIV_INLINE
ulint
fc_calc_drop_page_size(
/*==================*/
	byte *page,	   /*<! in: data buffer read from ssd, contain data page */
	ulint buf_len) /*<! in: the len of the data buffer */
{
	ulint fc_blk_size = fc_get_block_size();

	switch (fc_blk_size) {
		case 1:
			goto blk_size_1KB;
		case 2:
			goto blk_size_2KB;
		case 4:
			goto blk_size_4KB;
		case 8:
			goto blk_size_8KB;
		case 16:
			goto blk_size_16KB;
	}

blk_size_1KB:
	if ((buf_len >= 1) && (FALSE == fc_page_calc_size(page, 1024)))
		return 1;
	
blk_size_2KB:
	if ((buf_len >= 2) && (FALSE == fc_page_calc_size(page, 2048)))
		return 2;

blk_size_4KB:
	if ((buf_len >= 4) && (FALSE == fc_page_calc_size(page, 4096)))
		return 4;

blk_size_8KB:
	if ((buf_len >= 8) && (FALSE == fc_page_calc_size(page, 8192)))
		return 8;

blk_size_16KB:
	if ((buf_len == 16) && (FALSE == fc_page_calc_size(page, 0)))
		return 16;
	
	return (ULINT_UNDEFINED);
}

#endif
